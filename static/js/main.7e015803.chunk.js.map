{"version":3,"sources":["components/Container/Container.module.css","components/ContactForm/ContactForm.module.css","components/Container/Container.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css"],"names":["module","exports","Container","children","className","s","container","ContactForm","addContactPhone","useState","name","setName","number","setNumber","handleInputChange","e","target","value","form","onSubmit","preventDefault","Number","isNaN","alert","label","input","type","onChange","placeholder","pattern","title","required","btn","Filter","ContactList","contacts","onDeleteContact","list","map","id","item","info","onClick","App","setContacts","filter","setFilter","visibleContacts","contact","toLowerCase","includes","find","shortid","generate","prevState","length","contactID","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e015803.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2ZMRl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1F4--\",\"label\":\"ContactForm_label__32_ID\",\"input\":\"ContactForm_input__pwD92\",\"btn\":\"ContactForm_btn__3Q9Ob\"};","import PropTypes from 'prop-types';\r\nimport s from './Container.module.css';\r\n\r\nfunction Container({ children }) {\r\n  return <div className={s.container}>{children}</div>;\r\n}\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Container;","import { useState } from 'react';\r\nimport s from './ContactForm.module.css';\r\n\r\nconst ContactForm = ({ addContactPhone }) => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (!name || !number) {\r\n      alert('Вы не ввели все контактные данные');\r\n      return;\r\n    }\r\n    if (Number.isNaN(+number)) {\r\n      alert('Телефонный номер должен содержать только цифры');\r\n      return;\r\n    }\r\n\r\n    addContactPhone(name, number);\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n\r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit}>\r\n      <label className={s.label}>\r\n        Name\r\n        <input className={s.input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Ivan Ivanov\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n  title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n  required\r\n        />\r\n      </label>\r\n      <label className={s.label}>\r\n        Number\r\n        <input className={s.input}\r\n          name=\"number\"\r\n          type=\"tel\"\r\n          value={number}\r\n          onChange={handleInputChange}\r\n          placeholder=\"1111111\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n  title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n  required\r\n          \r\n        />\r\n      </label>\r\n      <button type=\"submit\" className={s.btn}>Add contact</button>\r\n    </form>\r\n  );\r\n};\r\n\r\n\r\nexport default ContactForm;","import PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\n\r\nfunction Filter({ value, onChange }) {\r\n  return (\r\n    <label className={s.label}>\r\n      Find contacts by name\r\n      <input\r\n        className={s.input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","import PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\n\r\nfunction ContactList({ contacts, onDeleteContact }) {\r\n  return (\r\n    <ul className={s.list}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li className={s.item} key={id}>\r\n          <p className={s.info}>\r\n            {name}: {number}\r\n          </p>\r\n          <button\r\n            className={s.btn}\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(id)} >\r\n            Delete\r\n           </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;","import { useState } from 'react';\r\nimport shortid from 'shortid';\r\nimport Container from './components/Container/Container';\r\nimport ContactForm from './components/ContactForm/ContactForm';\r\nimport Filter from './components/Filter/Filter';\r\nimport ContactList from './components/ContactList/ContactList';\r\n\r\nconst App = () => {\r\n  const [contacts, setContacts] = useState([]);\r\n  const [filter, setFilter] = useState('');\r\n\r\n  const addContactPhone = (name, number) => {\r\n    if (contacts.find(contact => contact.name === name)) {\r\n      alert(`${name} уже есть в списке ваших контактов`);\r\n      return;\r\n    }\r\n\r\n    const contact = {\r\n      id: shortid.generate(),\r\n      name,\r\n      number,\r\n    };\r\n\r\n    setContacts(prevState => [...prevState, contact]);\r\n  };\r\n\r\n  const deleteContact = contactID => {\r\n    setContacts(contacts.filter(({ id }) => id !== contactID));\r\n  };\r\n\r\n  const changeFilter = filter => {\r\n    setFilter(filter);\r\n  };\r\n\r\n  const getVisibleContacts = () => {\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter),\r\n    );\r\n  };\r\n\r\n  const visibleContacts = getVisibleContacts();\r\n\r\n  return (\r\n    <Container>\r\n        <ContactForm addContactPhone={addContactPhone} />\r\n          <h2>Contacts</h2>\r\n        {contacts.length > 1 && (\r\n          <Filter value={filter} onChange={changeFilter} />\r\n        )}\r\n        {contacts.length > 0 ? (\r\n          <ContactList\r\n            contacts={visibleContacts}\r\n            onDeleteContact={deleteContact}\r\n          />\r\n        ) : (\r\n          <p>Your phonebook is empty. Please add contact.</p>\r\n        )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3lpVi\",\"item\":\"ContactList_item__2zWCt\",\"btn\":\"ContactList_btn__25jNw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1LL_Z\",\"input\":\"Filter_input__1MED_\"};"],"sourceRoot":""}